<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>// 由于int类型范围限定在[-32768, 32767]，所以使用10us作为单位

// Place global declarations here.
const int N = 7;
const int minInterval_0 = 50; //串口通讯中断最短间隔
const int minInterval_1 = 50; //双发通讯中断最短间隔
const int minInterval_2 = 60; //机电通讯中断最短间隔
const int AD_start = 120; //小周期运行了1200us，第一个AD可以触发

typedef int[0, N-1] intr_id; // Also representing the priorities with 0 the highest and 9 the lowest
//    0 SIO0
//    1 双发通讯
//    2 AD        分割为两部分，第二部分的优先级为10，可被任意中断打断
//    3 Timer1, 小闭环    从该中断开始，每个中断都能被自身打断
//    4 Timer2，大闭环
//    5 DMA结束
//    6 DMA应答

chan intr[intr_id];
urgent broadcast chan prompt, resume;

const int D[intr_id] = {minInterval_0, minInterval_1, 500, 500, 2500, 2500, 2500}; // 中断必须执行结束的时间
const int E[intr_id] = {1, // 6us 
                         1, // 11us  
                         2, // 19us
                        125,
                        1011,
                        6, // 59us
                        8  // 77us
                        }; // 中断执行所需时间
const int cTime = 2; // AD无中断特权部分执行的时间, 16us

bool IRR[intr_id] = {false, false,false,false,false,false,false};
bool ISR[intr_id] = {false, false,false,false,false,false,false};

int ICG[intr_id] = {50, 2, 5, 5, 1, 1, 1}; //串口中断实际有50个
int fix_count[intr_id] = {0, 0, 0, 0, 0, 0, 0};
int fix_count_non;

intr_id stack[N+1]; // 中断栈
typedef int[0,N] SP;
SP sp = 0; // 栈顶指针

clock intTime[intr_id];
clock timeSinceStart[intr_id];
clock universe;

bool already[intr_id] = {false, false, false, false, false, false, false};

// bool AD_NON = false;

typedef int[0,N] Pri;
Pri get_highest_pri(){
    meta int i;
    for(i = 0; i &lt; N; i++){
        if(ISR[i] || IRR[i]){
            return i;
        } 
    }
    return N;
}

int get_highest_irr(){
    meta int j;
    for(j = 0; j &lt; N; j++){
        if(IRR[j]){
            return j;
        } 
    }
    return N;
}

int get_highest_isr(){
    meta int k;
    for(k = 0; k &lt; N; k++){
        if(ISR[k]){
            return k;
        } 
    }
    return N;
}

int fix_time(){
    meta int i;
    int t = 0;
    for(i = 0; i &lt; N; i++){
        t = t + fix_count[i] * E[i];
    }
    t = t + fix_count_non * cTime;
    return t;
}</declaration>
	<template>
		<name x="5" y="5">Interrupt</name>
		<parameter>int id</parameter>
		<location id="id0" x="-348" y="-442">
			<name x="-408" y="-425">Auxiliary1</name>
			<committed/>
		</location>
		<location id="id1" x="-433" y="-586">
			<name x="-443" y="-620">Wait</name>
			<label kind="invariant" x="-510" y="-646">intTime[id]' == 0</label>
		</location>
		<location id="id2" x="-254" y="-586">
			<name x="-280" y="-620">Acknowledge</name>
			<committed/>
		</location>
		<location id="id3" x="374" y="-68">
			<name x="400" y="-68">Error</name>
			<committed/>
		</location>
		<location id="id4" x="374" y="-272">
			<name x="391" y="-306">Auxiliary2</name>
			<committed/>
		</location>
		<location id="id5" x="-263" y="-76">
			<name x="-331" y="-68">Suspend</name>
			<label kind="invariant" x="-297" y="-51">intTime[id]' == 0</label>
		</location>
		<location id="id6" x="-263" y="-272">
			<name x="-237" y="-297">On</name>
			<label kind="invariant" x="-433" y="-280">intTime[id] &lt;= E[id]</label>
		</location>
		<location id="id7" x="374" y="-586">
			<name x="391" y="-595">Off</name>
			<label kind="invariant" x="332" y="-629">intTime[id]' == 0</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-297" y="-374">prompt!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-561" y="-34">timeSinceStart[id] &gt; D[id] + fix_time()</label>
			<nail x="-578" y="-586"/>
			<nail x="-578" y="0"/>
			<nail x="357" y="0"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-416" y="-586">get_highest_pri() &lt; id</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-552" y="-544">get_highest_pri() == id</label>
			<label kind="synchronisation" x="-510" y="-561">resume?</label>
			<label kind="assignment" x="-527" y="-518">ISR[id] = true,
IRR[id] = false,
stack[sp+1] = id,
sp++</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-272" y="-553">get_highest_pri() == id</label>
			<label kind="assignment" x="-272" y="-535">ISR[id] = true,
IRR[id] = false,
stack[sp+1] = id,
sp++</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-25" y="-620">intr[id]?</label>
			<label kind="assignment" x="-25" y="-578">IRR[id] = true,
timeSinceStart[id] = 0,
intTime[id] = 0,
already[id] = true</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-8" y="-59">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-204">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="391" y="-450">resume!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-144" y="-314">intTime[id] &gt;= E[id]</label>
			<label kind="assignment" x="102" y="-365">ISR[id] = false,
sp--</label>
			<nail x="68" y="-272"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-433" y="-178">prompt?</label>
			<nail x="-365" y="-161"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-246" y="-153">stack[sp] == id &amp;&amp; get_highest_irr() &gt; id</label>
			<label kind="synchronisation" x="-246" y="-136">resume?</label>
			<label kind="assignment" x="-246" y="-178">fix_count[id]++</label>
		</transition>
	</template>
	<template>
		<name>AD</name>
		<parameter>int id</parameter>
		<declaration>int count; // 最多执行6次
</declaration>
		<location id="id8" x="612" y="-357">
			<name x="602" y="-391">Suspend_2</name>
			<label kind="invariant" x="603" y="-340">intTime[id]' == 0</label>
		</location>
		<location id="id9" x="306" y="-357">
			<name x="340" y="-382">Non_intr</name>
			<label kind="invariant" x="161" y="-348">intTime[id] &lt;= cTime</label>
		</location>
		<location id="id10" x="-263" y="-543">
			<name x="-357" y="-586">Acknowledge</name>
			<committed/>
		</location>
		<location id="id11" x="374" y="-25">
			<name x="400" y="-25">Error</name>
			<committed/>
		</location>
		<location id="id12" x="212" y="-229">
			<name x="238" y="-263">Auxiliary1</name>
			<committed/>
		</location>
		<location id="id13" x="-263" y="-33">
			<name x="-340" y="-42">Suspend</name>
			<label kind="invariant" x="-374" y="-17">intTime[id]' == 0</label>
		</location>
		<location id="id14" x="-263" y="-229">
			<name x="-263" y="-272">On</name>
			<label kind="invariant" x="-433" y="-237">intTime[id] &lt;= E[id]</label>
		</location>
		<location id="id15" x="25" y="-544">
			<name x="42" y="-544">Off</name>
			<label kind="invariant" x="-17" y="-587">intTime[id]' == 0 &amp;&amp; timeSinceStart[id]' == 0</label>
		</location>
		<location id="id16" x="-501" y="-544">
			<name x="-511" y="-578">Wait</name>
			<label kind="invariant" x="-578" y="-604">intTime[id]' == 0</label>
		</location>
		<location id="id17" x="306" y="-544">
			<name x="296" y="-578">Auxiliary2</name>
			<committed/>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="127" y="-527">resume!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id17"/>
			<label kind="guard" x="314" y="-518">intTime[id] &gt;= cTime &amp;&amp; count &gt;= 6</label>
			<label kind="assignment" x="323" y="-493">sp--,
count = 0,
intTime[id] = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="guard" x="484" y="-187">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="255" y="-229">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="guard" x="17" y="-382">intTime[id] &gt;= cTime &amp;&amp; count &lt; 6</label>
			<label kind="assignment" x="34" y="-442">count++,
ISR[id] = true,
intTime[id] = 0</label>
			<nail x="17" y="-357"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="365" y="-323">stack[sp] == id &amp;&amp; get_highest_irr() &gt;= get_highest_isr()</label>
			<label kind="synchronisation" x="442" y="-348">resume?</label>
			<label kind="assignment" x="416" y="-289">fix_count_non++</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="433" y="-425">prompt?</label>
			<nail x="450" y="-450"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id14"/>
			<label kind="guard" x="-229" y="-450">get_highest_pri() == id</label>
			<label kind="synchronisation" x="-229" y="-331">prompt!</label>
			<label kind="assignment" x="-229" y="-416">ISR[id] = true,
IRR[id] = false,
stack[sp+1] = id,
sp++</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-102" y="-569">intr[id]?</label>
			<label kind="assignment" x="-110" y="-535">IRR[id] = true,
already[id] = true,
already[3] = false,
count = 1</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="guard" x="-8" y="-16">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="-8" y="-170">timeSinceStart[id] &gt; D[id] + fix_time()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="187" y="-306">resume!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="51" y="-221">intTime[id] &gt;= E[id]</label>
			<label kind="assignment" x="59" y="-272">ISR[id] = false,
intTime[id] = 0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-433" y="-135">prompt?</label>
			<nail x="-365" y="-118"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-255" y="-93">stack[sp] == id &amp;&amp; get_highest_irr() &gt; id</label>
			<label kind="synchronisation" x="-255" y="-119">resume?</label>
			<label kind="assignment" x="-255" y="-144">fix_count[id]++</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id16"/>
			<label kind="guard" x="-416" y="-535">get_highest_pri() &lt; id</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-586" y="-476">get_highest_pri() == id</label>
			<label kind="synchronisation" x="-535" y="-501">resume?</label>
			<label kind="assignment" x="-544" y="-450">ISR[id] = true,
IRR[id] = false,
stack[sp+1] = id,
sp++</label>
		</transition>
	</template>
	<template>
		<name>env</name>
		<declaration>

</declaration>
		<location id="id18" x="-119" y="0">
			<name x="-129" y="-34">Me</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="guard" x="93" y="-212">ICG[3] &gt; 0 &amp;&amp; (ISR[3] == false &amp;&amp; universe &gt; (5-ICG[3]) * D[3])</label>
			<label kind="synchronisation" x="127" y="-187">intr[3]!</label>
			<label kind="assignment" x="136" y="-161">ICG[3]--</label>
			<nail x="51" y="-221"/>
			<nail x="119" y="-153"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="-102" y="153">i:int[0, 1]</label>
			<label kind="guard" x="119" y="178">ICG[i] &gt; 0 &amp;&amp; (already[i] == false || timeSinceStart[i] &gt; D[i])</label>
			<label kind="synchronisation" x="-101" y="106">intr[i]!</label>
			<label kind="assignment" x="-17" y="229">ICG[i]--</label>
			<nail x="34" y="246"/>
			<nail x="127" y="153"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="51" y="-34">i:int[2, 6]</label>
			<label kind="guard" x="161" y="-68">ICG[i] &gt; 0&amp;&amp;                                          
(                           
(i == 2 &amp;&amp; already[3] == true  &amp;&amp; intTime[3] &gt; AD_start) || 
(i != 2 &amp;&amp; i != 3)
)</label>
			<label kind="synchronisation" x="51" y="25">intr[i]!</label>
			<label kind="assignment" x="51" y="51">ICG[i]--</label>
			<nail x="42" y="-59"/>
			<nail x="42" y="76"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
intr0 = Interrupt(0);
intr1 = Interrupt(1);
intr2 = AD(2);
intr3 = Interrupt(3);
intr4 = Interrupt(4);
intr5 = Interrupt(5);
intr6 = Interrupt(6);
/*
*/
environment = env();

// List one or more processes to be composed into a system.

system intr0, intr1, intr2, intr3, intr4, intr5, intr6, environment; //    </system>
</nta>
